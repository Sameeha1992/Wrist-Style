

<!DOCTYPE html>
<html lang="en">
<head>

<%-include("../partials/admin/header")%>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management</title>
    <!-- Include SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<div class="main-content">
    <div class="content-header">
        <h2 class="page-title">Category Management</h2>
    </div>

    <div class="search-container">
        <form action="/admin/category" method="get">
            <input type="text" class="search-input" placeholder="Search categories" name="search">
            <button class="search-button" type="submit">Search</button>
        </form>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                        <div class="mb-4">
                            <label for="category_name" class="form-label">Name</label>
                            <input type="text" name="name" placeholder="Type here" class="form-control" id="category_name" required/>
                            <div id="name-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label for="category_description" class="form-label">Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" required></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="d-grid">
                            <button class="btn btn-primary" type="submit">Create category</button>
                        </div>
                    </form>
                </div>
                <div class="col-md-9">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Offer Price</th>
                                    <th>Offer</th>
                                    <th>Status</th>
                                    <th>List/Unlist</th>
                                    <th>Edit</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% cat.reverse().forEach((category, index) => { %>
                                <tr>
                                    <td><%= category.name %></td>
                                    <td><%= category.description %></td>
                                    
                                    
                                    <td>
                                        <% if (category.categoryOffer) { %>
                                            <%=category.categoryOffer%>
                                            <%}else{%>
                                                0%
                                                <%}%>
                                   
                                                <%if(category.categoryOffer===0){%>
                                            <button class="btn btn-secondary btn-sm">
                                                <a href="#" class="text-white" onclick="addOffer('<%=category._id%>')">Add Offer</a>
                                            </button>
                                            <%}else{%>
                                        
                                            <button class="btn btn-info btn-sm">
                                                <a href="#" class="text-white" onclick= "removeOffer('<%=category._id%>')">Remove</a></button>

                                            <%}%>
                                        
                                    </td>
                                    <td>
                                        <span class="badge <%= category.isListed ? 'badge-success' : 'badge-danger' %>">
                                            <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                        </span>
                                    </td>
                                    <td>
                                        <% if (category.isListed) { %>
                                            <button class="btn btn-danger btn-sm">Unlist</button>
                                        <% } else { %>
                                            <button class="btn btn-success btn-sm">List</button>
                                        <% } %>
                                    </td>
                                    <td>
                                        <a href="/admin/editCategory/<%= category._id %>" class="btn btn-info btn-sm">Edit</a>
                                    </td>
                                </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pagination-container">
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
            <% } %>
    
            <% for (let i = 1; i <= totalPages; i++) { %>
                <% if (i === currentPage) { %>
                    <span class="current-page"><%= i %></span>
                <% } else { %>
                    <a href="?page=<%= i %>"><%= i %></a>
                <% } %>
            <% } %>
    
            <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
            <% } %>
        </div>
    </div>
</div>

<style>
    .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .content-header {
        margin-bottom: 30px;
    }

    .page-title {
        font-size: 32px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
        border-bottom: 2px solid #3498db;
        padding-bottom: 10px;
    }

    .search-container {
        display: flex;
        justify-content: center;
        margin-bottom: 30px;
    }

    .search-input {
        width: 400px;
        padding: 12px 20px;
        font-size: 16px;
        border: 2px solid #ddd;
        border-radius: 30px 0 0 30px;
        outline: none;
        transition: border-color 0.3s ease;
    }

    .search-button {
        padding: 12px 25px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 0 30px 30px 0;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .card-body {
        padding: 20px;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: -10px;
    }

    .col-md-3, .col-md-9 {
        padding: 10px;
    }

    .col-md-3 {
        flex: 0 0 25%;
        max-width: 25%;
    }

    .col-md-9 {
        flex: 0 0 75%;
        max-width: 75%;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: 600;
        text-align: center;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s ease, transform 0.1s ease;
        cursor: pointer;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 14px;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
        border: none;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
        border: none;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .table th,
    .table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e0e0e0;
    }

    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 14px;
        color: #7f8c8d;
    }

    .badge {
        display: inline-block;
        padding: 5px 10px;
        font-size: 12px;
        font-weight: 600;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 20px;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
    }

    .badge-danger {
        background-color: #dc3545;
        color: white;
    }

    .pagination-container {
        text-align: center;
        margin-top: 30px;
    }

    .pagination {
        display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
        display: inline-block;
        padding: 8px 16px;
        margin: 0 4px;
        border: 1px solid #ddd;
        text-decoration: none;
        color: #3498db;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

    .pagination .current-page {
        background-color: #3498db;
        color: white;
        font-weight: bold;
    }

    .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
    }

    @media (max-width: 768px) {
        .col-md-3, .col-md-9 {
            flex: 0 0 100%;
            max-width: 100%;
        }

        .search-input {
            width: 100%;
        }
    }
</style>

<script>
    function handleFormSubmit(event) {
        event.preventDefault();
        if (!validateForm()) {
            return;
        }
        const name = document.getElementsByName("name")[0].value;
        const description = document.getElementById("descriptionId").value;
        
        fetch("/admin/addCategory", {
            method: "POST",
            headers: {
                'Content-Type': "application/json"
            },
            body: JSON.stringify({name, description})
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => {
                    throw new Error(err.error);
                });
            }
            return response.json();
        })
        .then(data => {
            location.reload();
        })
        .catch(error => {
            if (error.message === "Category already exists") {
                Swal.fire({
                   icon: "error",
                   title: "Oops",
                   text: "Category already exists" 
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: "An error occurred while adding the category",
                });
            }
        });
    }

    function validateForm() {
        clearErrorMessages();
        const name = document.getElementById("category_name").value.trim();
        const description = document.getElementById("descriptionId").value.trim();
        let isValid = true;

        if (name === "") {
            displayErrorMessage("name-error", "Please enter a name");
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
           displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
           isValid = false;
        }
        if (description === "") {
            displayErrorMessage("description-error", "Please enter a description");
            isValid = false;
        }
        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName("error-message");
        Array.from(errorElements).forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }


  async function addOffer(categoryId){

    const {value:amount} = await Swal.fire({
        title:"Offer in percentage",
        input:"number",
        inputLabel:"Percentage",
        inputPlaceholder: "%",
    });

    if(amount){
        try {
            const response = await fetch("/admin/addCategoryOffer", {
                method:"POST",
                headers:{
                    'content-type' :'application/json',
                },
                body:JSON.stringify({
                    percentage:amount,
                    categoryId:categoryId,
                }),
            });

            const data = await response.json();
            if(response.ok && data.status===true){
                Swal.fire(
                    "Offer added",
                    "The offer has been added",
                    "success"
                ).then(()=>{
                    location.reload();
                })
            }else {
                Swal.fire("Failed", data.message || "Adding offer failed","error");
            }
            
        } catch (error) {
            Swal.fire(
                "Error",
                "An error occured while adding the offer",
                "error"
            );
            console.log("Error adding offer",error)
            
        }
    }
  }



  async function removeOffer(categoryId){
    try {
        const response= await fetch("/admin/removeCategoryOffer" , {
            method:"POST",
            headers:{
                "content-type" : "application/json"
            },
            body: JSON.stringify({
                categoryId:categoryId,
            })
        })
        const data = await response.json();
        if(response.ok && data.status ===true){
            Swal.fire(
                "Offer removed",
                "The offer has been removed",
                "success"
            ) .then(()=>{
                location.reload();
            });
        } else{
            Swal.fire("Failed",data.message || "Removing offer failed" ,"error")
        }
        
    } catch (error) {
        Swal.fire(
            "Error",
            "An error occured when removing the offer",
            "error"
        );
        console.error("Error removing offer",error)
    }
  }



</script>

<%-include("../partials/admin/footer")%>


































